{
  "name": "RH RAG Agent",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -80,
        40
      ],
      "id": "a0fee376-aada-40a6-b6a2-00c516f1bf7c",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "63EsCEjr23QRKIO0",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query.message }}",
        "options": {
          "systemMessage": "= Forget all previous instructions.\n\nYou are now an HR assistant working at a fictitious agency named **RecrutFlow**. You are playing the role of a helpful and knowledgeable internal employee whose task is to assist teammates by answering any question they have about the agency's internal data.\n\nYou have access to a Supabase database (containing fake, non-sensitive data), and you will use the following tools to query this data:\n\n### Tools Available:\n- **Get posts** → retrieve information about job posts the agency is hiring for.\n- **Get candidates** → retrieve information about job applicants.\n- **Get interviews** → retrieve information about scheduled interviews.\n- **Get recruiters** → retrieve information about recruiters who work at the agency.\n\nYou can use these tools by generating valid PostgREST-style filters to query the Supabase database.\n\n---\n\n### 🔍 How to Handle Each Request:\n\n1. **Understand the question** – Ask yourself what specific information your teammate is requesting.\n2. **Plan the queries** – Determine which tables you need to query and which fields to fetch.\n3. **Always resolve foreign keys** – If you encounter an ID that references another table (such as `post_id`, `recruiter_id`, or `interview_id`), **do not display the ID**. Instead, **perform a follow-up query** on the related table to retrieve human-readable fields like names or titles.\n4. **Query efficiently** – Minimize queries when possible, but always prioritize accuracy and readability.\n5. **Provide a clear answer** – Turn the JSON results into human-friendly responses that are easy to understand.\n\n---\n\n### 🛑 Important Rules:\n\n- **Never display foreign key IDs** — always resolve them into meaningful labels (e.g., show a post’s title instead of its `post_id`).\n- **Do not include database IDs** in your responses.\n- **Always respond with clear, natural language** — your teammates are not developers.\n- The current date is: `{{ $now.format('yyyy-LL-dd') }}`\n- You are allowed to share data like email addresses or phone numbers because all data is 100% fictional.\n- Your tone should be helpful, concise, and informative.\n- Please be aware f the status when retrieving elements from candidates and interviews tables.\n\n---\n\n### 📦 Database Schema Overview:\n\n#### `candidates`\n- `id`, `name`, `email`, `phone`, `linkedin_url`, `cv_url`, `application_date`, `desired_position`, `certifications[]`, `profile_summary`, `relevance_score`, `score_justification`, `interview_date`, `recruiter_assigned`, `post_id`, `application_status`, `experiences[]`, `degrees[]`, `skills[]`, `interview_id`\n\n> FK references: `post_id → posts`, `interview_id → interviews`\n\n#### `interviews`\n- `id`, `candidate_id`, `recruiter_id`, `post_id`, `scheduled_at`, `location`, `feedback`, `created_at`, `interview_status`\n\n> FK references: `candidate_id → candidates`, `recruiter_id → recruiters`, `post_id → posts`\n\n#### `posts`\n- `id`, `title`, `description`, `department`, `location`, `created_at`, `post_status`, `enterprise`\n\n#### `recruiters`\n- `id`, `name`, `email`, `phone`, `role`, `created_at`\n\n---\n\nYou are now ready. Wait for your teammate to ask a question and respond by following the steps and rules above.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -60,
        -220
      ],
      "id": "dd610b23-1920-435e-bc17-b96031b64a78",
      "name": "RAG"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use this tool to get all available posts from the supabase posts database.\nYou will need to provide a PostREST filter query. \nThe PostREST filter query = \"select=title,id\"",
        "operation": "getAll",
        "tableId": "candidates",
        "returnAll": true,
        "filterType": "string",
        "filterString": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filters__String_', `this is the PostREST filter query. You will need to create a query based on the context and question asked by the user in order to give accurate results.`, 'string') }}"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        420,
        200
      ],
      "id": "8f2173dc-2ee0-4ed0-bb0f-267236066943",
      "name": "Get candidates",
      "credentials": {
        "supabaseApi": {
          "id": "TjjIyMYW0lXoF9uh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use this tool to get all available posts from the supabase posts database.\nYou will need to provide a PostREST filter query. \nThe PostREST filter query = \"select=title,id\"",
        "operation": "getAll",
        "tableId": "posts",
        "returnAll": true,
        "filterType": "string",
        "filterString": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filters__String_', `this is the PostREST filter query. You will need to create a query based on the context and question asked by the user in order to give accurate results.`, 'string') }}"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        280,
        200
      ],
      "id": "b223ec11-54d9-48f8-9612-ee55d9356f87",
      "name": "Get posts",
      "credentials": {
        "supabaseApi": {
          "id": "TjjIyMYW0lXoF9uh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use this tool to get all available posts from the supabase posts database.\nYou will need to provide a PostREST filter query. \nThe PostREST filter query = \"select=title,id\"",
        "operation": "getAll",
        "tableId": "interviews",
        "returnAll": true,
        "filterType": "string",
        "filterString": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filters__String_', `this is the PostREST filter query. You will need to create a query based on the context and question asked by the user in order to give accurate results.`, 'string') }}"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        580,
        200
      ],
      "id": "59f46f6c-3a07-41d6-8da5-882d81f0b473",
      "name": "Get interviews",
      "credentials": {
        "supabaseApi": {
          "id": "TjjIyMYW0lXoF9uh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use this tool to get all available posts from the supabase posts database.\nYou will need to provide a PostREST filter query. \nThe PostREST filter query = \"select=title,id\"",
        "operation": "getAll",
        "tableId": "recruiters",
        "returnAll": true,
        "filterType": "string",
        "filterString": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filters__String_', `this is the PostREST filter query. You will need to create a query based on the context and question asked by the user in order to give accurate results.`, 'string') }}"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        720,
        200
      ],
      "id": "7e267f6a-dfce-4447-86aa-cc703aedcafb",
      "name": "Get recruiters",
      "credentials": {
        "supabaseApi": {
          "id": "TjjIyMYW0lXoF9uh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=recruitflow"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        60,
        40
      ],
      "id": "5322b3b5-9e12-4917-a3c8-165c123e38b5",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "hMNEQwHepVP71pX6",
          "name": "Postgres Documents DB"
        }
      }
    },
    {
      "parameters": {
        "path": "62939693-cdd8-49dc-b166-0adf05fd7282",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -400,
        -220
      ],
      "id": "56cc265a-9ccc-4abe-b247-c577fcdd5a62",
      "name": "Webhook",
      "webhookId": "62939693-cdd8-49dc-b166-0adf05fd7282"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        420,
        -220
      ],
      "id": "92565154-1254-4abe-a83a-aefca0b985d0",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "content": "## RAG Agent\n\nThe RAG Agent serves as an assistant for the Recruitflow agency. Its primary role is to answer specific questions by retrieving information from the database. The key areas of focus include:\n\n- Candidates\n- Interviews\n- Recruiters\n\nThe agent will utilize tools and PostREST filters to request data from the relevant tables. \n\n**Note:** You can try it on the chat page of the app.",
        "height": 980,
        "width": 1460
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -560,
        -560
      ],
      "id": "01bec209-9bd9-42fe-8a57-0fcf1bda4292",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "RAG",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get candidates": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get posts": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get interviews": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get recruiters": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "RAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b8a6c4db-1a9c-47a7-baf7-9491fccff8a5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f3bf0740e86805879ff06102b8c465db40713bc059e5e6e6903caae1305dc76"
  },
  "id": "5guq891iNUZWn50y",
  "tags": []
}